service: zgt

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

# custom:
#   serverlessPluginTypescript:
#     tsConfigFileLocation: './tsconfig.json'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-express   

# you can define service wide environment variables here
#environment:
 # PORT: 3000
  # MYSQL_DATABASE: 'dataminr'
  # MYSQL_HOSTNAME: 'mysql.playspread.com'
  # MYSQL_USER: 'oluwafemiakinde'
  # MYSQL_PASSWORD: 'Algorithm212...'

# you can add packaging information here
package:
  include:
    - ./src
   
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  healthCheck:
    handler: src/app.handler
    events: 
     - httpApi:
          path: /api/v1/health
          method: GET
     - httpApi:
          path: /api/v1/lead/all
          method: GET 
     - httpApi:
          path: /api/v1/lead/create
          method: POST 
     - httpApi:
          path: /api/v1/lead/all
          method: DELETE
     - httpApi:
          path: /api/v1/lead/submit_request
          method: POST 
    environment:
      NODE_ENV: 'development'
      PORT: 2001

  #  The following are a few example events you can configure
  #  NOTE: Please make sure to change your handler code to work with those events
  #  Check the event documentation for details
  #  events:
  #    - httpApi:
  #        path: /users/create
  #        method: get
  #    - websocket: $connect
  #    - s3: ${env:BUCKET}
  #    - schedule: rate(10 minutes)
  #    - sns: greeter-topic
  #    - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  #    - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  #    - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
  #    - iot:
  #        sql: "SELECT * FROM 'some_topic'"
  #    - cloudwatchEvent:
  #        event:
  #          source:
  #            - "aws.ec2"
  #          detail-type:
  #            - "EC2 Instance State-change Notification"
  #          detail:
  #            state:
  #              - pending
  #    - cloudwatchLog: '/aws/lambda/hello'
  #    - cognitoUserPool:
  #        pool: MyUserPool
  #        trigger: PreSignUp
  #    - alb:
  #        listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
  #        priority: 1
  #        conditions:
  #          host: example.com
  #          path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
